!function(){function e(){function e(e){var c=e;!function(){if(c.config&&c.config.warning&&(c.config.warning=!1),c.config&&"autocomplete"===c.config.type){c.config.autocompleteConfig&&c.config.autocompleteConfig.displayKey&&!c.config.autocompleteConfig.valueKey&&(c.config.autocompleteConfig.valueKey=c.config.autocompleteConfig.displayKey);var e=c.config.autocompleteConfig.querySearch(c.model[c.config.code],c.model).$$state.value||[];if(e&&e.constructor===Array&&1===e.length)c.config.autocompleteConfig.selectedItem=e[0];else if(void 0!==c.model[c.config.code]&&null!==c.model[c.config.code]){for(var o=!1,n=e.length-1;0<=n;n--){var i=e[n];if(c.config.autocompleteConfig.valueKey?i[c.config.autocompleteConfig.valueKey]===c.model[c.config.code]&&(o=!0):i===c.model[c.config.code]&&(o=!0),o){c.config.autocompleteConfig.selectedItem=i;break}}o||(c.config.autocompleteConfig.searchText=c.model[c.config.code],delete c.config.autocompleteConfig.selectedItem)}else c.config.autocompleteConfig.searchText=c.model[c.config.code],delete c.config.autocompleteConfig.selectedItem}else c.config&&"date"===c.config.type?(c.config.dateConfig||(c.config.dateConfig={}),c.config.dateConfig.minDate=c.config.dateConfig.minDate?moment(c.config.dateConfig.minDate).toDate():void 0,c.config.dateConfig.maxDate=c.config.dateConfig.maxDate?moment(c.config.dateConfig.maxDate).toDate():void 0,"number"==typeof c.model[c.config.code]&&c.model[c.config.code]&&(c.model[c.config.code]=moment(c.model[c.config.code]).toDate())):c.config&&"checkbox"===c.config.type&&c.model[c.config.code]?c.model[c.config.code]=!0:c.config&&"checkboxWithInput"===c.config.type&&c.model[c.config.code]?c.model[c.config.code]=!0:c.config&&"select"===c.config.type&&(c.config.selectConfig||(c.config.selectConfig={}),c.config.selectConfig.asyncOptions||(c.config.selectConfig.asyncOptions=function(){}));null!==c.model[c.config.code]&&void 0!==c.model[c.config.code]&&c.config.initFn&&"function"==typeof c.config.initFn&&c.config.initFn(c.model[c.config.code],c.model)}()}return e.$inject=["$scope"],{restrict:"EA",templateUrl:"src/tpl/form-component.tpl.html",transclude:!0,scope:{config:"=",model:"=",editable:"="},controller:e}}angular.module("mdformComponent",["formComponent.template","ngMaterial"]).directive("mdFormComponent",e),e.$inject=[]}(),angular.module("formComponent.template",[]).run(["$templateCache",function(e){"use strict";e.put("src/tpl/form-component.tpl.html",'<div class=md-form-component layout=row layout-align="start center" ng-if=!config.hide><div ng-if=!config.hideLabel flex=40 layout=column layout-align="start stretch"><label class="md-form-label label-{{config.type}}" for={{config.code}}>{{ config.name }} {{ config.required ? \'*\' : \'\'}}</label></div><div flex="{{config.hideLabel ? \'100\' : \'60\' }}" layout=column layout-align="center stretch"><md-input-container class=md-block flex layout=column layout-align="center stretch" ng-if="config.type !== \'date\' && config.type !== \'checkboxWithInput\'" md-no-float><input ng-if="config.type === \'text\'" ng-model=model[config.code] name={{config.code}} ng-class="{ \'md-warning\': config.warning }" aria-label="{{config.name || config.code}}" id={{config.code}} placeholder={{config.placeholder}} md-no-asterisk ng-disabled="config.disabled || !editable" ng-readonly="config.readonly || false" ng-required="config.required || false" ng-minlength="config.minLength || undefined" ng-maxlength="config.maxLength || undefined" ng-pattern="config.pattern || undefined" ng-change="config.changeFn(model[config.code], model)" ng-blur="config.blurFn(model[config.code], model)"><textarea ng-if="config.type === \'textarea\'" ng-model=model[config.code] name={{config.code}} ng-class="{ \'md-warning\': config.warning }" aria-label="{{config.name || config.code}}" id={{config.code}} type=textarea placeholder={{config.placeholder}} md-no-asterisk ng-disabled="config.disabled || !editable" ng-readonly="config.readonly || false" ng-required="config.required || false" ng-minlength="config.minLength || undefined" ng-maxlength="config.maxLength || undefined" ng-pattern="config.pattern || undefined" rows="{{config.textareaConfig.rows || 1}}" ng-change="config.changeFn(model[config.code], model)" ng-blur="config.blurFn(model[config.code], model)">\n\t\t\t</textarea><input ng-if="config.type === \'email\'" ng-model=model[config.code] name={{config.code}} ng-class="{ \'md-warning\': config.warning }" aria-label="{{config.name || config.code}}" id={{config.code}} type=email placeholder={{config.placeholder}} md-no-asterisk ng-disabled="config.disabled || !editable" ng-readonly="config.readonly || false" ng-required="config.required || false" ng-minlength=config.minLength ng-maxlength=config.maxLength ng-pattern="config.pattern || undefined" ng-change="config.changeFn(model[config.code], model)" ng-blur="config.blurFn(model[config.code], model)"> <input ng-if="config.type === \'number\'" ng-model=model[config.code] name={{config.code}} ng-class="{ \'md-warning\': config.warning }" aria-label="{{config.name || config.code}}" id={{config.code}} type=number placeholder={{config.placeholder}} md-no-asterisk ng-disabled="config.disabled || !editable" ng-readonly="config.readonly || false" ng-required="config.required || false" ng-min=config.min ng-max=config.max ng-step="config.step || undefined" ng-minlength=config.minLength ng-maxlength=config.maxLength ng-pattern="config.pattern || undefined" ng-change="config.changeFn(model[config.code], model)" ng-blur="config.blurFn(model[config.code], model)"><md-radio-group ng-if="config.type === \'radio\'" ng-model=model[config.code] name={{config.code}} aria-label="{{config.name || config.code}}" ng-class="{ \'md-warning\': config.warning }" ng-change="config.changeFn(model[config.code], model)" ng-readonly="config.readonly || false" ng-required="config.required || false" ng-disabled="config.disabled || !editable"><md-radio-button ng-if="config.radioConfig.valueKey && config.radioConfig.textKey" ng-repeat="option in config.radioConfig.options" value={{option[config.radioConfig.valueKey]}} aria-label={{option[config.radioConfig.textKey]}} class=md-primary>{{option[config.radioConfig.textKey]}}</md-radio-button><md-radio-button ng-if="!config.radioConfig.valueKey || !config.radioConfig.textKey" ng-repeat="option in config.radioConfig.options" value={{option}} aria-label={{option}} class=md-primary>{{option[config.radioConfig.textKey]}}</md-radio-button></md-radio-group><md-select ng-if="config.type === \'select\' && !config.selectConfig.multiple && config.type !== \'checkboxWithDropdown\'" name={{config.code}} ng-class="{ \'md-warning\': config.warning }" id={{config.code}} md-no-asterisk ng-model=model[config.code] aria-label="{{config.name || config.code}}" ng-disabled="config.disabled || !editable" ng-required="config.required || false" ng-change="config.changeFn(model[config.code], model)" ng-blur="config.blurFn(model[config.code], model)"><md-option ng-if="config.selectConfig.valueKey && config.selectConfig.textKey" ng-repeat="option in config.selectConfig.options" ng-value=option[config.selectConfig.valueKey]>{{option[config.selectConfig.textKey]}}</md-option><md-option ng-if="!config.selectConfig.valueKey || !config.selectConfig.textKey" ng-repeat="option in config.selectConfig.options" ng-value=option>{{option}}</md-option></md-select><md-select ng-if="config.type === \'select\' && config.selectConfig.multiple" name={{config.code}} ng-class="{ \'md-warning\': config.warning }" id={{config.code}} md-no-asterisk ng-model=model[config.code] multiple aria-label="{{config.name || config.code}}" ng-disabled="config.disabled || !editable" ng-required="config.required || false" ng-change="config.changeFn(model[config.code], model)" ng-blur="config.blurFn(model[config.code], model)"><md-option ng-if="config.selectConfig.valueKey && config.selectConfig.textKey" ng-repeat="option in config.selectConfig.options" ng-value=option[config.selectConfig.valueKey]>{{option[config.selectConfig.textKey]}}</md-option><md-option ng-if="!config.selectConfig.valueKey || !config.selectConfig.textKey" ng-repeat="option in config.selectConfig.options" ng-value=option>{{option}}</md-option></md-select><md-checkbox class=md-primary ng-if="config.type === \'checkbox\'" ng-disabled="config.disabled || !editable" name={{config.code}} ng-class="{ \'md-warning\': config.warning }" id={{config.code}} md-no-asterisk ng-model=model[config.code] aria-label="{{config.name || config.code}}" ng-required="config.required || false" ng-change="config.changeFn(model[config.code], model)"></md-checkbox><md-autocomplete ng-if="config.type === \'autocomplete\'" ng-required="config.required || false" ng-disabled="config.disabled || !editable" md-input-name={{config.code}} ng-class="{ \'md-warning\': config.warning }" md-no-asterisk md-input-id={{config.code}} md-no-cache=config.autocompleteConfig.noCache md-selected-item=config.autocompleteConfig.selectedItem md-search-text-change="config.autocompleteConfig.searchTextChange(config.autocompleteConfig.searchText, model)" md-search-text=config.autocompleteConfig.searchText md-selected-item-change="config.autocompleteConfig.selectedItemChange(item, model)" md-items="item in config.autocompleteConfig.querySearch(config.autocompleteConfig.searchText, model)" md-item-text=item[config.autocompleteConfig.displayKey] md-min-length="config.autocompleteConfig.minLength || 0" placeholder={{config.placeholder}}><md-item-template><span ng-if=config.autocompleteConfig.displayKey md-highlight-text=config.autocompleteConfig.searchText md-highlight-flags=^i title="{{item[config.autocompleteConfig.resultTitleKey] || item[config.autocompleteConfig.displayKey]}}">{{ item[config.autocompleteConfig.resultLabelKey] || item[config.autocompleteConfig.displayKey] }}</span> <span ng-if=!config.autocompleteConfig.displayKey md-highlight-text=config.autocompleteConfig.searchText md-highlight-flags=^i title={{item}}>{{ item }}</span></md-item-template><md-not-found>Nothing results matching "{{config.autocompleteConfig.searchText}}" were found.</md-not-found></md-autocomplete></md-input-container><md-datepicker flex layout=row layout-align=stretch-center ng-if="config.type === \'date\'" name={{config.code}} ng-class="{ \'md-warning\': config.warning }" md-no-asterisk id={{config.code}} ng-model=model[config.code] md-placeholder="{{config.placeholder || \'Enter date\'}}" md-min-date="(config.dateConfig && config.dateConfig.minDate) ? config.dateConfig.minDate : false" md-max-date="(config.dateConfig && config.dateConfig.maxDate) ? config.dateConfig.maxDate : false" ng-required="config.required || false" ng-disabled="config.disabled || !editable" ng-change="config.changeFn(model[config.code], model)"></md-datepicker><div class=checkbox-input layout=row flex layout-align="center stretch" ng-if="config.type === \'checkboxWithInput\'"><md-checkbox class=md-primary ng-disabled="config.disabled || !editable" name={{config.code}} ng-class="{ \'md-warning\': config.warning }" id={{config.code}} md-no-asterisk ng-model=model[config.code] aria-label="{{config.name || config.code}}" ng-required="config.required || false" ng-change="config.changeFn(model[config.code], model)"></md-checkbox><md-input-container class=md-block flex layout=column layout-align="center stretch" md-no-float><input ng-model=model[config.inputBox.code] name={{config.inputBox.code}} ng-class="{ \'md-warning\': config.inputBox.warning }" aria-label="{{config.inputBox.name || config.inputBox.code}}" id={{config.inputBox.code}} type={{config.inputBox.type}} placeholder={{config.inputBox.placeholder}} md-no-asterisk ng-disabled=!model[config.code] ng-readonly="config.inputBox.readonly || false" ng-required="config.inputBox.required || false" ng-minlength="config.inputBox.minLength || undefined" ng-maxlength="config.inputBox.maxLength || undefined" ng-pattern="config.inputBox.pattern || undefined" ng-change="config.inputBox.changeFn(model[config.inputBox.code], model)" ng-blur="config.inputBox.blurFn(model[config.inputBox.code], model)"></md-input-container></div><div class=checkbox-dropdown layout=row flex layout-align="center stretch" ng-if="config.type === \'checkboxWithDropdown\'"><md-checkbox class=md-primary ng-disabled="config.disabled || !editable" name={{config.code}} ng-class="{ \'md-warning\': config.warning }" id={{config.code}} md-no-asterisk ng-model=model[config.code] aria-label="{{config.name || config.code}}" ng-required="config.required || false" ng-change="config.changeFn(model[config.code], model)"></md-checkbox><md-input-container class=md-block flex layout=column layout-align="center stretch" md-no-float><md-select name={{config.dropdownBox.code}} ng-class="{ \'md-warning\': config.warning }" id={{config.dropdownBox.code}} md-no-asterisk ng-model=model[config.dropdownBox.code] aria-label="{{config.dropdownBox.name || config.dropdownBox.code}}" ng-disabled=!model[config.code] ng-required="config.dropdownBox.required || false" ng-change="config.dropdownBox.changeFn(model[config.code], model)" ng-blur="config.dropdownBox.blurFn(model[config.code], model)"><md-option ng-if="config.dropdownBox.selectConfig.valueKey && config.dropdownBox.selectConfig.textKey" ng-repeat="option in config.dropdownBox.selectConfig.options" ng-value=option[config.dropdownBox.selectConfig.valueKey]>{{option[config.dropdownBox.selectConfig.textKey]}}</md-option><md-option ng-if="!config.dropdownBox.selectConfig.valueKey || !config.dropdownBox.selectConfig.textKey" ng-repeat="option in config.dropdownBox.selectConfig.options" ng-value=option>{{option}}</md-option></md-select></md-input-container></div></div></div>')}]);